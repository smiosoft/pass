trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  BuildConfiguration: 'Release'

stages:
- stage: build_stage
  displayName: Build stage
  jobs:
  - job: build_job
    displayName: Build job
    steps:
    - task: gitversion/setup@0
      displayName: Install GitVersion
      inputs:
        versionSpec: '5.5.0'

    - task: gitversion/execute@0
      displayName: Determine version
      inputs:
        useConfigFile: true
        configFilePath: 'build/.azure-pipelines/version-config.yml'

    - script: |
        echo Major: $(GitVersion.Major)
        echo Minor: $(GitVersion.Minor)
        echo Patch: $(GitVersion.Patch)
        echo PreReleaseTag: $(GitVersion.PreReleaseTag)
        echo PreReleaseTagWithDash: $(GitVersion.PreReleaseTagWithDash)
        echo PreReleaseLabel: $(GitVersion.PreReleaseLabel)
        echo PreReleaseNumber: $(GitVersion.PreReleaseNumber)
        echo WeightedPreReleaseNumber: $(GitVersion.WeightedPreReleaseNumber)
        echo BuildMetaData: $(GitVersion.BuildMetaData)
        echo BuildMetaDataPadded: $(GitVersion.BuildMetaDataPadded)
        echo FullBuildMetaData: $(GitVersion.FullBuildMetaData)
        echo MajorMinorPatch: $(GitVersion.MajorMinorPatch)
        echo SemVer: $(GitVersion.SemVer)
        echo LegacySemVer: $(GitVersion.LegacySemVer)
        echo LegacySemVerPadded: $(GitVersion.LegacySemVerPadded)
        echo AssemblySemVer: $(GitVersion.AssemblySemVer)
        echo AssemblySemFileVer: $(GitVersion.AssemblySemFileVer)
        echo FullSemVer: $(GitVersion.FullSemVer)
        echo InformationalVersion: $(GitVersion.InformationalVersion)
        echo BranchName: $(GitVersion.BranchName)
        echo EscapedBranchName: $(GitVersion.EscapedBranchName)
        echo Sha: $(GitVersion.Sha)
        echo ShortSha: $(GitVersion.ShortSha)
        echo NuGetVersionV2: $(GitVersion.NuGetVersionV2)
        echo NuGetVersion: $(GitVersion.NuGetVersion)
        echo NuGetPreReleaseTagV2: $(GitVersion.NuGetPreReleaseTagV2)
        echo NuGetPreReleaseTag: $(GitVersion.NuGetPreReleaseTag)
        echo VersionSourceSha: $(GitVersion.VersionSourceSha)
        echo CommitsSinceVersionSource: $(GitVersion.CommitsSinceVersionSource)
        echo CommitsSinceVersionSourcePadded: $(GitVersion.CommitsSinceVersionSourcePadded)
        echo UncommittedChanges: $(GitVersion.UncommittedChanges)
        echo CommitDate: $(GitVersion.CommitDate)

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build projects'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration) --no-restore'
        versioningScheme: byBuildNumber

    - task: DotNetCoreCLI@2
      displayName: 'Pack source projects'
      inputs:
        command: 'pack'
        packagesToPack: 'src/**/*.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)'
        nobuild: true
        versioningScheme: byEnvVar
        versionEnvVar: 'GitVersion.NuGetVersion'

    - publish: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Publish artifact: $(ArtifactNuGetName)'
      artifact: 'nuget-packages'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

